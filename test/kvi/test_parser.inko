import kvi.parser (Error, Event, Parser)
import std.io (Buffer, Error as IoError)
import std.test (Tests)

fn parser(input: String) -> Parser[Buffer[String]] {
  Parser.new(Buffer.new(input))
}

fn end_of_input[T] -> Result[T, Error] {
  Result.Error(Error.Read(IoError.EndOfInput))
}

fn invalid_byte[T](string: String) -> Result[T, Error] {
  Result.Error(Error.InvalidByte(string.byte(0)))
}

fn pub tests(t: mut Tests) {
  t.test('Parser.read_size', fn (t) {
    let p1 = parser('1\r\n')

    t.equal(p1.read_size, Result.Ok(1))
    t.true(p1.buffer.empty?)

    let p2 = parser('12345\r\n')

    t.equal(p2.read_size, Result.Ok(12345))
    t.true(p2.buffer.empty?)

    t.equal(parser('1\r\n10').read_size, Result.Ok(1))
    t.equal(parser('12\r\n').read_size, Result.Ok(12))
    t.equal(parser('123\r\n').read_size, Result.Ok(123))
    t.equal(parser('1234\r\n').read_size, Result.Ok(1234))
    t.equal(parser('12345\r\n').read_size, Result.Ok(12345))
    t.equal(parser('123456\r\n').read_size, Result.Ok(123456))
    t.equal(parser('').read_size, end_of_input)
    t.equal(parser('\r\n').read_size, end_of_input)
    t.equal(parser('1').read_size, end_of_input)
    t.equal(parser('12').read_size, end_of_input)
    t.equal(parser('123').read_size, end_of_input)
    t.equal(parser('123\r').read_size, end_of_input)
    t.equal(parser('123\n').read_size, end_of_input)
    t.equal(parser('123\n\r').read_size, invalid_byte('\n'))
    t.equal(parser('123ab\r\n').read_size, invalid_byte('a'))
  })

  t.test('Parser.parse', fn (t) {
    t.equal(parser('*4\r\n').parse, Result.Ok(Event.Array(4)))
    t.equal(parser('$4\r\n').parse, Result.Ok(Event.BulkString(4)))
  })
}
