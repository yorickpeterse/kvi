import kvi.logger (Level, Logger)
import std.test (Tests)

fn pub tests(t: mut Tests) {
  t.fork(
    'Logger.debug',
    child: fn {
      let log = Logger.new(Level.Debug)

      log.debug('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, 'DEBUG [system] foo\n') },
  )

  t.fork(
    'Logger.debug when logging is disabled',
    child: fn {
      let log = Logger.new(Level.None)

      log.debug('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, '') },
  )

  t.fork(
    'Logger.info',
    child: fn {
      let log = Logger.new(Level.Info)

      log.info('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, 'INFO [system] foo\n') },
  )

  t.fork(
    'Logger.info when logging is disabled',
    child: fn {
      let log = Logger.new(Level.None)

      log.info('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, '') },
  )

  t.fork(
    'Logger.warn',
    child: fn {
      let log = Logger.new(Level.Info)

      log.warn('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, 'WARN [system] foo\n') },
  )

  t.fork(
    'Logger.warn when logging is disabled',
    child: fn {
      let log = Logger.new(Level.None)

      log.warn('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, '') },
  )

  t.fork(
    'Logger.error',
    child: fn {
      let log = Logger.new(Level.Info)

      log.error('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, 'ERROR [system] foo\n') },
  )

  t.fork(
    'Logger.error when logging is disabled',
    child: fn {
      let log = Logger.new(Level.None)

      log.error('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, '') },
  )

  t.fork(
    'Logger.info with a custom label',
    child: fn {
      let log = Logger.new(Level.Info).with_label('example')

      log.info('foo')
      log.flush
    },
    test: fn (t, proc) { t.equal(proc.spawn.stderr, 'INFO [example] foo\n') },
  )
}
