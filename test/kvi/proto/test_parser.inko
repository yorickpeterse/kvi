import kvi.proto.error (Error)
import kvi.proto.parser (Command, Event, Parser)
import std.io (Buffer)
import std.test (Tests)

fn parser(input: String, buffer: mut ByteArray) -> Parser[Buffer[String]] {
  buffer.clear
  Parser.new(Buffer.new(input), buffer)
}

fn cmd(input: String) -> Result[Command, Error] {
  parser(input, ByteArray.new).command
}

fn parse(input: String) -> Result[Event, Error] {
  parser(input, ByteArray.new).parse
}

fn invalid_syntax[T] -> Result[T, Error] {
  Result.Error(Error.InvalidSyntax)
}

fn invalid_command[T](name: String) -> Result[T, Error] {
  Result.Error(Error.InvalidCommand(name))
}

fn pub tests(t: mut Tests) {
  t.test('Parser.size', fn (t) {
    let buf = ByteArray.new
    let p1 = parser('1\r\n', buf)

    t.equal(p1.size, Result.Ok(1))
    t.true(p1.buffer.empty?)

    let p2 = parser('12345\r\n', buf)

    t.equal(p2.size, Result.Ok(12345))
    t.true(p2.buffer.empty?)

    t.equal(parser('1\r\n10', buf).size, Result.Ok(1))
    t.equal(parser('12\r\n', buf).size, Result.Ok(12))
    t.equal(parser('123\r\n', buf).size, Result.Ok(123))
    t.equal(parser('1234\r\n', buf).size, Result.Ok(1234))
    t.equal(parser('12345\r\n', buf).size, Result.Ok(12345))
    t.equal(parser('123456\r\n', buf).size, Result.Ok(123456))

    t.equal(parser('', buf).size, invalid_syntax)
    t.equal(parser('\r\n', buf).size, invalid_syntax)
    t.equal(parser('1', buf).size, invalid_syntax)
    t.equal(parser('12', buf).size, invalid_syntax)
    t.equal(parser('123', buf).size, invalid_syntax)
    t.equal(parser('123\r', buf).size, invalid_syntax)
    t.equal(parser('123\n', buf).size, invalid_syntax)
    t.equal(parser('123\n\r', buf).size, invalid_syntax)
    t.equal(parser('123ab\r\n', buf).size, invalid_syntax)
  })

  t.test('Parser.parse', fn (t) {
    t.equal(parse('*4\r\n'), Result.Ok(Event.Array(4)))
    t.equal(parse('$4\r\n'), Result.Ok(Event.BulkString(4)))
    t.equal(parse(':0\r\n'), Result.Ok(Event.Int(0)))
    t.equal(parse(':+0\r\n'), Result.Ok(Event.Int(0)))
    t.equal(parse(':-0\r\n'), Result.Ok(Event.Int(0)))
    t.equal(parse(':1234\r\n'), Result.Ok(Event.Int(1234)))
    t.equal(parse(':+1234\r\n'), Result.Ok(Event.Int(1234)))
    t.equal(parse(':-1234\r\n'), Result.Ok(Event.Int(-1234)))

    t.equal(parse('*'), invalid_syntax)
    t.equal(parse('*4'), invalid_syntax)
    t.equal(parse('*4\r'), invalid_syntax)
    t.equal(parse('*4ab'), invalid_syntax)

    t.equal(parse('$'), invalid_syntax)
    t.equal(parse('$4'), invalid_syntax)
    t.equal(parse('$4\r'), invalid_syntax)
    t.equal(parse('$4ab'), invalid_syntax)

    t.equal(parse(':'), invalid_syntax)
    t.equal(parse(':0'), invalid_syntax)
    t.equal(parse(':0\r'), invalid_syntax)
    t.equal(parse(':+\r'), invalid_syntax)
    t.equal(parse(':+\r\n'), invalid_syntax)
    t.equal(parse(':0ab'), invalid_syntax)
    t.equal(parse(':023ab'), invalid_syntax)
    t.equal(parse(':0234b'), invalid_syntax)
  })

  t.test('Parser.array', fn (t) {
    let buf = ByteArray.new

    t.equal(parser('*0\r\n', buf).array, Result.Ok(0))
    t.equal(parser('*1\r\n', buf).array, Result.Ok(1))
    t.equal(parser(':0\r\n', buf).array, invalid_syntax)
    t.equal(parser('', buf).array, invalid_syntax)
  })

  t.test('Parser.command', fn (t) {
    t.equal(cmd('$3\r\nDEL\r\n'), Result.Ok(Command.Delete))
    t.equal(cmd('$3\r\nGET\r\n'), Result.Ok(Command.Get))
    t.equal(cmd('$3\r\nSET\r\n'), Result.Ok(Command.Set))
    t.equal(cmd('$4\r\nKEYS\r\n'), Result.Ok(Command.Keys))
    t.equal(cmd('$5\r\nHELLO\r\n'), Result.Ok(Command.Hello))

    t.equal(cmd('$3\r\nFOO\r\n'), invalid_command('FOO'))
    t.equal(cmd('$4\r\nDELZ\r\n'), invalid_command('DELZ'))
    t.equal(cmd('$4\r\nGETZ\r\n'), invalid_command('GETZ'))
    t.equal(cmd('$4\r\nSETZ\r\n'), invalid_command('SETZ'))
    t.equal(cmd('$4\r\nHELZ\r\n'), invalid_command('HELZ'))
    t.equal(cmd('$4\r\nKEYZ\r\n'), invalid_command('KEYZ'))
    t.equal(cmd('$5\r\nKEYSS\r\n'), invalid_command('KEYSS'))
    t.equal(cmd('$5\r\nHELLX\r\n'), invalid_command('HELLX'))
  })
}
