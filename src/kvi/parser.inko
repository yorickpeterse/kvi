import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.io (Error as IoError, Read)
import std.string (ToString)

let ADD = 43
let AST = 42
let CLN = 58
let CR = 13
let DLR = 36
let LF = 10
let NINE = 57
let SUB = 45
let UPPER_D = 68
let UPPER_G = 71
let UPPER_H = 72
let UPPER_K = 75
let UPPER_S = 83
let ZERO = 48

let COMMANDS = ['DEL', 'GET', 'HELLO', 'KEYS', 'SET']

fn inline parse_digit(current: Int, byte: Int) -> Int {
  current.wrapping_mul(10).wrapping_add(byte - ZERO)
}

fn inline digit?(byte: Int) -> Bool {
  byte >= ZERO and byte <= NINE
}

# An error produced when parsing RESP3 messages.
#
# We deliberately don't track things like byte offsets/line numbers/whatever.
# This information isn't reported back to clients and there's not really a point
# in logging it either as a server can't do much about clients sending nonsense.
type copy enum Error {
  # The syntax is invalid (i.e. we ran into an unexpected byte).
  case InvalidSyntax

  # A string with the wrong size is found.
  #
  # The `Int` is the expected amount of bytes.
  case InvalidStringSize(Int)

  # A command name is invalid or unsupported.
  case InvalidCommand

  # The data parsed thus far is valid, but we can out of input while expecting
  # more.
  case EndOfInput

  # A generic IO error occurred when reading from the input stream.
  case Read(IoError)
}

impl ToString for Error {
  fn pub to_string -> String {
    match self {
      case InvalidSyntax -> 'the syntax is invalid'
      case InvalidStringSize(n) -> 'expected a string with a size of ${n} bytes'
      case InvalidCommand -> 'the command is invalid'
      case EndOfInput -> 'unexpected end of input'
      case Read(e) -> e.to_string
    }
  }
}

impl Equal for Error {
  fn pub ==(other: Error) -> Bool {
    match (self, other) {
      case (InvalidSyntax, InvalidSyntax) -> true
      case (InvalidStringSize(a), InvalidStringSize(b)) -> a == b
      case (InvalidCommand, InvalidCommand) -> true
      case (EndOfInput, EndOfInput) -> true
      case (Read(a), Read(b)) -> a == b
      case _ -> false
    }
  }
}

impl Format for Error {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case InvalidSyntax -> formatter.tuple('InvalidSyntax').finish
      case InvalidStringSize(v) -> {
        formatter.tuple('InvalidStringSize').field(v).finish
      }
      case InvalidCommand -> formatter.tuple('InvalidCommand').finish
      case EndOfInput -> formatter.tuple('EndOfInput').finish
      case Read(v) -> formatter.tuple('Read').field(v).finish
    }
  }
}

type copy enum Event {
  case Array(Int)
  case Int(Int)
  case BulkString(Int)
}

impl Equal for Event {
  fn pub ==(other: Event) -> Bool {
    match (self, other) {
      case (Array(a), Array(b)) -> a == b
      case (Int(a), Int(b)) -> a == b
      case (BulkString(a), BulkString(b)) -> a == b
      case _ -> false
    }
  }
}

impl Format for Event {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Array(v) -> formatter.tuple('Array').field(v).finish
      case Int(v) -> formatter.tuple('Int').field(v).finish
      case BulkString(v) -> formatter.tuple('BulkString').field(v).finish
    }
  }
}

type copy enum Command {
  case Delete
  case Get
  case Hello
  case Keys
  case Set
}

impl Equal for Command {
  fn pub ==(other: Command) -> Bool {
    match (self, other) {
      case (Delete, Delete) -> true
      case (Get, Get) -> true
      case (Hello, Hello) -> true
      case (Keys, Keys) -> true
      case (Set, Set) -> true
      case _ -> false
    }
  }
}

impl Format for Command {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Delete -> formatter.tuple('Delete').finish
      case Get -> formatter.tuple('Get').finish
      case Hello -> formatter.tuple('Hello').finish
      case Keys -> formatter.tuple('Keys').finish
      case Set -> formatter.tuple('Set').finish
    }
  }
}

type inline Parser[T: mut + Read] {
  let @reader: T
  let @buffer: mut ByteArray

  fn static new(reader: T, buffer: mut ByteArray) -> Parser[T] {
    Parser(reader: reader, buffer: buffer)
  }

  fn mut command -> Result[Command, Error] {
    let len = try bulk_string

    match len {
      # The minimum command size is 3 bytes.
      case 0 or 1 or 2 -> throw Error.InvalidSyntax
      # The maximum command size is 5 bytes.
      case n if n > 5 -> throw Error.InvalidSyntax
      case n -> try read_exact(n)
    }

    # For most commands the first tree bytes form a unique prefix. In some cases
    # there's a shared prefix (e.g. GET and GETEX), so in such cases we also
    # need to compare the remainder.
    #
    # The end goal of this somewhat complicated `match` is to reduce the amount
    # of linear scans we need to perform, as parsing commands is something we
    # expect to do often.
    #
    # While this match is a bit ugly, until
    # https://github.com/inko-lang/inko/issues/827 is addressed it's more or
    # less the best we can do.
    let cmd = match
      (@buffer.get(2) << 16) | (@buffer.get(1) << 8) | @buffer.get(0)
    {
      # DEL[...]
      case 0x4c4544 -> {
        if len == 3 { Command.Delete } else { throw Error.InvalidCommand }
      }
      # GET[...]
      case 0x544547 -> {
        if len == 3 { Command.Get } else { throw Error.InvalidCommand }
      }
      # HEL[...]
      case 0x4c4548 -> {
        if len == 5 and @buffer.ends_with?('LO') {
          Command.Hello
        } else {
          throw Error.InvalidCommand
        }
      }
      # KEY[...]
      case 0x59454b -> {
        if len == 4 and @buffer.ends_with?('S') {
          Command.Keys
        } else {
          throw Error.InvalidCommand
        }
      }
      # SET[...]
      case 0x544553 -> {
        if len == 3 { Command.Set } else { throw Error.InvalidCommand }
      }
      case _ -> throw Error.InvalidCommand
    }

    @buffer.clear
    try read_terminator
    Result.Ok(cmd)
  }

  fn mut string_literal(size: Int) -> Result[String, Error] {
    match try bulk_string {
      case n if n != size -> throw Error.InvalidStringSize(size)
      case _ -> try read_exact(size)
    }

    let val = @buffer.drain_to_string

    try read_terminator
    Result.Ok(val)
  }

  fn mut array -> Result[Int, Error] {
    match parse {
      case Ok(Array(n)) -> Result.Ok(n)
      case Ok(_) -> Result.Error(Error.InvalidSyntax)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut bulk_string -> Result[Int, Error] {
    match parse {
      case Ok(BulkString(n)) -> Result.Ok(n)
      case Ok(_) -> Result.Error(Error.InvalidSyntax)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut parse -> Result[Event, Error] {
    match try read_byte {
      case AST -> Result.Ok(Event.Array(try size))
      case DLR -> Result.Ok(Event.BulkString(try size))
      case CLN -> Result.Ok(Event.Int(try integer))
      case _ -> throw Error.InvalidSyntax
    }
  }

  fn mut size -> Result[Int, Error] {
    digits(-1)
  }

  fn mut integer -> Result[Int, Error] {
    match read_byte {
      case Ok(ADD) -> size
      case Ok(SUB) -> Result.Ok(0 - try size)
      case Ok(v) -> digits(v)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut digits(initial: Int) -> Result[Int, Error] {
    let mut val = 0

    # The minimum number of bytes is three: one for a single digit, and two for
    # \r\n. This means we can read the initial/minimum amount of necessary data
    # in a single call.
    if initial >= 0 { @buffer.push(initial) }

    try read_exact(3 - @buffer.size)

    match (@buffer.get(0), @buffer.get(1), @buffer.get(2)) {
      case (a, CR, LF) if digit?(a) -> {
        @buffer.clear
        val = parse_digit(val, a)
        return Result.Ok(val)
      }
      case (a, b, CR) if digit?(a) and digit?(b) -> {
        @buffer.clear
        val = parse_digit(val, a)
        val = parse_digit(val, b)
        try read_lf
        return Result.Ok(val)
      }
      case (a, b, c) if digit?(a) and digit?(b) and digit?(c) -> {
        @buffer.clear
        val = parse_digit(val, a)
        val = parse_digit(val, b)
        val = parse_digit(val, c)
      }
      case _ -> throw Error.InvalidSyntax
    }

    # For the remaining input we can only read at most two bytes per time,
    # otherwise we might read too much. For example, for the input `123\r\n` the
    # above code reads `123`, leaving us with the remaining `\r\n`.
    loop {
      try read_exact(2)

      match (@buffer.get(0), @buffer.get(1)) {
        case (CR, LF) -> {
          @buffer.clear
          break
        }
        case (a, CR) if digit?(a) -> {
          @buffer.clear
          val = parse_digit(val, a)
          try read_lf
          break
        }
        case (a, b) if digit?(a) and digit?(b) -> {
          @buffer.clear
          val = parse_digit(val, a)
          val = parse_digit(val, b)
        }
        case _ -> throw Error.InvalidSyntax
      }
    }

    Result.Ok(val)
  }

  fn inline mut read_byte -> Result[Int, Error] {
    try read_exact(1)
    Result.Ok(@buffer.pop.get)
  }

  fn inline mut read_exact(size: Int) -> Result[Nil, Error] {
    match read(size) {
      case Ok(n) if n == size -> Result.Ok(nil)
      case Ok(_) -> Result.Error(Error.EndOfInput)
      case Error(e) -> Result.Error(e)
    }
  }

  fn inline mut read_terminator -> Result[Nil, Error] {
    match try read_byte {
      case CR -> read_lf
      case _ -> Result.Error(Error.InvalidSyntax)
    }
  }

  fn inline mut read_lf -> Result[Nil, Error] {
    match try read_byte {
      case LF -> Result.Ok(nil)
      case _ -> Result.Error(Error.InvalidSyntax)
    }
  }

  fn inline mut read(size: Int) -> Result[Int, Error] {
    match @reader.read(into: @buffer, size: size) {
      case Ok(n) -> Result.Ok(n)
      case Error(e) -> Result.Error(Error.Read(e))
    }
  }
}
