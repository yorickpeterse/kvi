# An optimized hash map.
import std.clone (Clone)
import std.cmp (Equal)
import std.hash (Hash)
import std.hash.siphash (SipHasher13)
import std.iter (Stream)
import std.rand (Random)

# The load factor percentage in the (inclusive) range 1 to 10.
let LOAD_FACTOR = 9

# The initial capacity (in entries) of a Map.
#
# This must be a power of two.
let INITIAL_CAPACITY = 64

fn inline resize_threshold(size: Int) -> Int {
  LOAD_FACTOR.wrapping_mul(size) / 10
}

# A type for generating hash codes.
#
# Clones of a `Hasher` all use the same seed such that different connections
# produce the same hash codes for the same keys.
type copy Hasher {
  let @key0: Int
  let @key1: Int

  fn static new -> Self {
    let rng = Random.new

    with_keys(rng.int, rng.int)
  }

  fn static with_keys(key0: Int, key1: Int) -> Self {
    Self(key0: key0, key1: key1)
  }

  fn hash[H: Hash](input: ref H) -> Int {
    let hasher = SipHasher13.new(@key0, @key1)

    input.hash(hasher)
    hasher.finish
  }
}

impl Clone for Hasher {
  fn pub clone -> Self {
    Self(key0: @key0, key1: @key1)
  }
}

# A key and its hash code.
type inline Key[K: Equal] {
  let @name: K
  let @hash: Int

  fn static new(name: K, hash: Int) -> Self {
    Self(name: name, hash: hash)
  }
}

impl Equal for Key {
  fn pub inline ==(other: ref Self) -> Bool {
    @name == other.name
  }
}

# A key/value pair in a `Map`.
type inline Entry[K: Equal, V] {
  let @key: Key[K]
  let @value: V
  let @distance: Int

  fn inline move with_value(value: V) -> Self {
    Entry(key: @key, value: value, distance: @distance)
  }

  fn inline move with_distance(distance: Int) -> Self {
    Entry(key: @key, value: @value, distance: distance)
  }
}

# A hash map optimized for storing the data in a shard.
#
# The implementation is based on that of `std.map.Map` but with the following
# differences:
#
# - Ordering is not guaranteed, as we don't need this
# - The memory representation is more efficient
# - Hash codes are calculated ahead of time instead of by the `Map` upon
#   insertion/lookups
type Map[K: Equal, V] {
  # The entries in the map.
  #
  # An `Option.None` value signals the slot is available.
  let mut @entries: Array[Option[Entry[K, V]]]

  # The number of values stored in `self`
  let mut @size: Int

  # The number of values we can store before a resize is necessary.
  let mut @resize_at: Int

  fn static new -> Self {
    let entries = Array.with_capacity(INITIAL_CAPACITY)
    let resize_at = resize_threshold(entries.capacity)

    # Entry doesn't implement `Clone` so we can't use `Array.filled` and instead
    # have to manually fill it with the default values.
    for _ in 0.until(entries.capacity) { entries.push(Option.None) }

    Map(entries: entries, size: 0, resize_at: resize_at)
  }

  # Retrieves the value of the given key, if there is any.
  fn get(key: ref Key[K]) -> Option[ref V] {
    match index_for(key) {
      case Some(i) -> {
        match @entries.get(i) {
          case Ok(Some(v)) -> Option.Some(v.value)
          case _ -> Option.None
        }
      }
      case _ -> Option.None
    }
  }

  # Inserts the key and value into `self`.
  fn mut set(key: Key[K], value: V) -> Option[V] {
    if @size >= @resize_at { resize }

    match insert(Entry(key: key, value: value, distance: 0)) {
      case Some({ @value = v }) -> Option.Some(v)
      case _ -> Option.None
    }
  }

  # Removes the key from `self`, returning the value.
  #
  # If the key wasn't assigned a value, an `Option.None` is returned.
  fn mut remove(key: ref Key[K]) -> Option[V] {
    let idx = match index_for(key) {
      case Some(v) -> v
      case _ -> return Option.None
    }

    let entry = @entries.swap(idx, Option.None)

    @size = @size.wrapping_sub(1)

    # Now we need to backwards shift entries that come _after_ the one we just
    # removed, but only if they actually desire a better (= preceding) index.
    let mut prev = idx
    let mut idx = desired_index_for(idx.wrapping_add(1))

    loop {
      let dist = match @entries.get(idx).or_panic {
        case Some(v) if v.distance > 0 -> v.distance
        case _ -> break
      }

      # At this point it's guaranteed that the index points to a Some(Entry).
      let entry = @entries.swap(idx, Option.None).get.with_distance(
        dist.wrapping_sub(1),
      )

      @entries.set(prev, Option.Some(entry))
      prev = idx
      idx = desired_index_for(idx.wrapping_add(1))
    }

    match entry {
      case Some({ @value = val }) -> Option.Some(val)
      case _ -> panic('unreachable')
    }
  }

  # Returns an iterator over the keys in `self`.
  fn keys -> Stream[ref K] {
    let mut idx = 0

    Stream.new(fn move {
      loop {
        match @entries.get(idx := idx.wrapping_add(1)) {
          case Ok(Some(e)) -> return Option.Some(e.key.name)
          case Ok(_) -> {}
          case _ -> return Option.None
        }
      }
    })
  }

  fn mut resize {
    # This reserves space for _additional_ values, which due to it being the
    # existing size will double the space.
    let new_size = @entries.size.wrapping_mul(2)
    let entries = @entries := Array.with_capacity(new_size)

    for _ in 0.until(new_size) { @entries.push(Option.None) }

    @resize_at = resize_threshold(new_size)
    @size = 0

    for slot in entries {
      match slot {
        case Some(entry) -> insert(entry.with_distance(0))
        case _ -> next
      }
    }
  }

  fn mut insert(new: Entry[K, V]) -> Option[Entry[K, V]] {
    let mut idx = desired_index_for(new.key.hash)
    let mut insert = new

    loop {
      let mut existing = match @entries.swap(idx, Option.None) {
        case Some(v) -> v
        case _ -> {
          @entries.set(idx, Option.Some(insert))
          @size = @size.wrapping_add(1)
          return Option.None
        }
      }

      if existing.key == insert.key {
        @entries.set(idx, Option.Some(insert))
        return Option.Some(existing)
      }

      # If the entry we want to insert is further from its desired distance than
      # the existing entry, we'll swap the two and shift the existing entry to
      # the right.
      if existing.distance < insert.distance {
        @entries.set(idx, Option.Some(insert))
        insert = existing
      } else {
        @entries.set(idx, Option.Some(existing))
      }

      let dist = insert.distance.wrapping_add(1)

      idx = desired_index_for(idx.wrapping_add(1))
      insert = insert.with_distance(dist)
    }
  }

  fn index_for(key: ref Key[K]) -> Option[Int] {
    let mut idx = desired_index_for(key.hash)
    let mut dist = 0

    loop {
      # The index is always in bounds, so barring any bugs in the implementation
      # the panic is never triggered.
      let entry = match @entries.get(idx).or_panic {
        case Some(v) -> v
        case _ -> return Option.None
      }

      # If our current distance is greater than that of the existing entry, the
      # entry we're looking for will never be found in the following entries, so
      # we bail out here.
      if dist > entry.distance { return Option.None }

      # Different keys may hash to the same value, so we need to compare the
      # keys to make sure we are in fact operating on the expected entry.
      if entry.key == key { return Option.Some(idx) }

      idx = desired_index_for(idx.wrapping_add(1))
      dist += 1
    }
  }

  fn inline desired_index_for(hash: Int) -> Int {
    # The number of entries is always a power of two, so we can use & here
    # instead of the more expensive % operator.
    hash & @entries.size.wrapping_sub(1)
  }
}
