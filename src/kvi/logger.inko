# Logging of messages.
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering)
import std.fmt (Format, Formatter)
import std.int (ToInt)
import std.stdio (Stderr)
import std.string (ToString)
import std.sync (Future, Promise)

# The minimum level/type of message to log.
type copy enum Level {
  case Debug
  case Info
  case Warn
  case Error
  case None

  fn static parse(value: String) -> Option[Level] {
    match value {
      case 'debug' -> Option.Some(Level.Debug)
      case 'info' -> Option.Some(Level.Info)
      case 'warn' -> Option.Some(Level.Warn)
      case 'error' -> Option.Some(Level.Error)
      case 'none' -> Option.Some(Level.None)
      case _ -> Option.None
    }
  }
}

impl ToInt for Level {
  fn pub inline to_int -> Int {
    match self {
      case Debug -> 0
      case Info -> 1
      case Warn -> 2
      case Error -> 3
      case None -> 4
    }
  }
}

impl ToString for Level {
  fn pub inline to_string -> String {
    match self {
      case Debug -> 'DEBUG'
      case Info -> 'INFO'
      case Warn -> 'WARN'
      case Error -> 'ERROR'
      case None -> ''
    }
  }
}

impl Equal for Level {
  fn pub ==(other: Level) -> Bool {
    match (self, other) {
      case (Debug, Debug) -> true
      case (Info, Info) -> true
      case (Warn, Warn) -> true
      case (Error, Error) -> true
      case (None, None) -> true
      case _ -> false
    }
  }
}

impl Compare for Level {
  fn pub inline cmp(other: Level) -> Ordering {
    to_int.cmp(other.to_int)
  }
}

impl Format for Level {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Debug -> formatter.tuple('Debug').finish
      case Info -> formatter.tuple('Info').finish
      case Warn -> formatter.tuple('Warn').finish
      case Error -> formatter.tuple('Error').finish
      case None -> formatter.tuple('None').finish
    }
  }
}

# A process that writes logging data to STDERR.
type async LogWriter {
  let @output: Stderr

  fn static new -> Self {
    LogWriter(recover Stderr.new)
  }

  fn async mut flush(promise: uni Promise[Nil]) {
    let _ = @output.flush

    promise.set(nil)
  }

  fn async mut write(level: Level, message: String) {
    # Logging failures aren't a big deal and probably won't happen anyway, so we
    # ignore them.
    let _ = @output.write_string('${level}: ${message}\n')
  }
}

# A type for logging messages to STDERR.
#
# A logger consists of two parts:
#
# - A `LogWriter` process tasked with performing the actual writing
# - A `Logger` wrapper type that determines if logging is necessary and if so,
#   forwards the request to the `LogWriter`
#
# This setup allows multiple processes to use the same logger without the output
# getting messed up, and prevents us from sending redundant logging messages to
# the `LogWriter`.
type inline Logger {
  let @writer: LogWriter
  let @level: Level

  # Returns a `Logger` that logs any kind of message.
  fn static new(level: Level) -> Logger {
    Logger(writer: LogWriter.new, level: level)
  }

  fn mut debug(message: String) {
    write(Level.Debug, message)
  }

  fn mut info(message: String) {
    write(Level.Info, message)
  }

  fn mut warn(message: String) {
    write(Level.Warn, message)
  }

  fn mut error(message: String) {
    write(Level.Error, message)
  }

  fn mut flush {
    match Future.new {
      case (fut, prom) -> {
        @writer.flush(prom)
        fut.get
      }
    }
  }

  fn mut write(level: Level, message: String) {
    if level >= @level { @writer.write(level, message) }
  }
}

impl Clone for Logger {
  fn pub clone -> Logger {
    Logger(writer: @writer, level: @level)
  }
}
