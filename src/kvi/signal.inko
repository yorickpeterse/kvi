import std.signal (Signal)
import std.sync (Channel)

# TODO: upstream to Inko's stdlib
type async Waiter {
  fn async wait(signal: uni Signal, channel: uni Channel[Signal]) {
    signal.wait
    channel.send(signal)
  }
}

type inline Signals {
  let @channel: Channel[Signal]

  fn static new -> Signals {
    Signals(Channel.new)
  }

  fn add(signal: uni Signal) {
    Waiter().wait(signal, recover @channel.clone)
  }

  fn wait -> Signal {
    recover @channel.receive
  }
}
