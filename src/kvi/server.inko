import kvi.config (Config)
import kvi.logger (Logger)
import kvi.proto.error (Error)
import kvi.proto.generator (Generator)
import kvi.proto.parser (Parser)
import kvi.signal (Signals)
import std.net.socket (TcpClient, TcpServer)
import std.signal (Signal)

type Server {
  let @config: Config
  let @logger: Logger

  fn static new(config: Config) -> Self {
    let logger = Logger.new(config.log_level)

    Server(config: config, logger: logger)
  }

  # TODO: use logging for errors
  fn move start -> Result[Nil, String] {
    let accepters = @config.accepters.to_int
    let shards = @config.shards.to_int

    @logger.info('starting with ${accepters} accepters and ${shards} shards')

    let sockets = try @config.ips.iter.try_reduce([], fn (socks, ip) {
      let port = @config.port.to_int

      @logger.info('listening on ${ip}:${port}')

      let sock = recover {
        match TcpServer.new(ip, port) {
          case Ok(v) -> v
          case Error(e) -> throw 'failed to bind to ${ip}:${port}: ${e}'
        }
      }

      let mut i = 0

      while i < accepters {
        let sock = recover {
          match sock.try_clone {
            case Ok(v) -> v
            case Error(e) -> throw 'failed to clone a listener socket: ${e}'
          }
        }

        Accepter.new(@config, recover @logger.clone, sock).run
        i += 1
      }

      socks.push(recover sock)
      Result.Ok(socks)
    })

    let signals = Signals.new

    signals.add(Signal.Interrupt)
    signals.add(Signal.Terminate)
    signals.add(Signal.Quit)

    loop {
      match signals.wait {
        case Interrupt or Terminate -> {
          @logger.info('shutting down gracefully')
          break
        }
        case _ -> return Result.Ok(nil)
      }
    }

    # Shutting down the sockets wakes up any sleeping accepter processes,
    # allowing them to shut down cleanly without accepting new connections.
    for s in sockets { let _ = s.socket.shutdown }

    # Wait for any pending log data to be written, otherwise we might lose that
    # information.
    @logger.flush

    Result.Ok(nil)
  }
}

type async Accepter {
  let @config: Config
  let @logger: Logger
  let @socket: TcpServer

  fn static new(
    config: ref Config,
    logger: uni Logger,
    socket: uni TcpServer,
  ) -> Accepter {
    Accepter(config: recover config.clone, logger: logger, socket: socket)
  }

  fn async mut run {
    loop {
      let sock = recover {
        match @socket.accept {
          case Ok(v) -> v
          # We may encounter this error if the server is being shut down in
          # response to e.g. a SIGINT signal.
          case Error(InvalidArgument) -> break
          case Error(e) -> {
            @logger.debug('failed to accept a new connection: ${e}')
            next
          }
        }
      }

      Connection.new(recover @logger.clone).run(sock)
    }
  }
}

type async Connection {
  let @logger: Logger
  let @buffer: ByteArray

  fn static new(logger: uni Logger) -> Connection {
    Connection(logger: logger, buffer: recover ByteArray.new)
  }

  fn async mut run(socket: uni TcpClient) {
    let socket = recover {
      let socket = recover socket

      # TODO: a pipeline may include multiple commands, each needing to act on a
      # different shard. How do we handle that?
      #
      # Treat this as a message, which in turn consists of N commands. A
      # dedicated Message type is used to track the number of remaining
      # commands. We need to store the pending message somewhere so we can
      # resume it.
      match handle_pipeline(socket) {
        case Ok(_) -> {
          # TODO: act upon request
        }
        case Error(Closed) -> {
          @logger.debug('client disconnected')
          return
        }
        case Error(Read(e)) -> {
          @logger.debug('disconnecting due to IO error: ${e}')
          return
        }
        case Error(e) -> {
          let _ = socket.write_string('-ERR ${e}\r\n')
          let _ = socket.shutdown

          @logger.debug(e.to_string)
          return
        }
      }

      socket
    }

    run(socket)
  }

  fn mut handle_pipeline(socket: mut TcpClient) -> Result[Nil, Error] {
    let parser = Parser.new(socket, @buffer)
    let mut vals = try parser.array

    while vals > 0 {
      vals -= 1

      match parser.command {
        case Ok(Hello) -> {
          match try parser.string_literal {
            case '3' -> {
              vals -= 1

              # TODO: clean this up, this is ugly
              # TODO: include actual version number
              let gen = Generator.new

              gen.map(3)
              gen.bulk_string('server')
              gen.bulk_string('kvi')
              gen.bulk_string('version')
              gen.bulk_string('TODO')
              gen.bulk_string('proto')
              gen.int(3)

              let _ = parser.stream.write_string(gen.into_string)
            }
            case n -> {
              @logger.debug('rejected unsupported protocol version ${n}')
              throw Error.InvalidVersion
            }
          }
        }
        case Ok(Get) -> {
          vals -= 1

          let key = try parser.string_literal

          # TODO: implement
          @logger.debug('GET ${key}')

          let _ = socket.write_string('-ERR not yet supported\r\n')
        }
        case Ok(_) -> {
          # TODO: implement
        }
        case Error(InvalidCommand(n)) -> {
          @logger.debug("rejecting invalid command '${n}'")

          let _ = socket.write_string('-ERR the command is invalid\r\n')

          # If a command is invalid/unsupported it may be followed by a sub
          # command and/or arguments. We need to skip those.
          try parser.skip_bulk_strings(vals)
          break
        }
        case Error(e) -> throw e
      }
    }

    Result.Ok(nil)
  }
}
