import kvi.config (Config)
import kvi.logger (Logger)
import kvi.parser (Error, Parser)
import kvi.signal (Signals)
import std.net.socket (TcpClient, TcpServer)
import std.signal (Signal)

type Server {
  let @config: Config
  let @logger: Logger

  fn static new(config: Config) -> Self {
    let logger = Logger.new(config.log_level)

    Server(config: config, logger: logger)
  }

  fn move start -> Result[Nil, String] {
    let sockets = try @config.ips.iter.try_reduce([], fn (socks, ip) {
      let port = @config.port.to_int
      let sock = recover {
        match TcpServer.new(ip, port) {
          case Ok(v) -> v
          case Error(e) -> throw 'failed to bind to ${ip}:${port}: ${e}'
        }
      }

      let mut i = 0
      let max = @config.accepters.to_int

      while i < max {
        let sock = recover {
          match sock.try_clone {
            case Ok(v) -> v
            case Error(e) -> throw 'failed to clone a listener socket: ${e}'
          }
        }

        Accepter.new(@config, recover @logger.clone, sock).run
        i += 1
      }

      socks.push(recover sock)
      Result.Ok(socks)
    })

    let signals = Signals.new

    signals.add(Signal.Interrupt)
    signals.add(Signal.Terminate)
    signals.add(Signal.Quit)

    loop {
      match signals.wait {
        case Interrupt or Terminate -> {
          @logger.info('shutting down gracefully')
          break
        }
        case _ -> return Result.Ok(nil)
      }
    }

    # Shutting down the sockets wakes up any sleeping accepter processes,
    # allowing them to shut down cleanly without accepting new connections.
    sockets.into_iter.each(fn (s) { let _ = s.socket.shutdown })

    # Wait for any pending log data to be written, otherwise we might lose that
    # information.
    @logger.flush

    Result.Ok(nil)
  }
}

type async Accepter {
  let @config: Config
  let @logger: Logger
  let @socket: TcpServer

  fn static new(
    config: ref Config,
    logger: uni Logger,
    socket: uni TcpServer,
  ) -> Accepter {
    Accepter(config: recover config.clone, logger: logger, socket: socket)
  }

  fn async mut run {
    loop {
      let sock = recover {
        match @socket.accept {
          case Ok(v) -> v
          # We may encounter this error if the server is being shut down in
          # response to e.g. a SIGINT signal.
          case Error(InvalidArgument) -> break
          case Error(e) -> {
            @logger.debug('failed to accept a new connection: ${e}')
            next
          }
        }
      }

      Connection.new(recover @logger.clone).run(sock)
    }
  }
}

type async Connection {
  let @logger: Logger
  let @buffer: ByteArray

  fn static new(logger: uni Logger) -> Connection {
    Connection(logger: logger, buffer: recover ByteArray.new)
  }

  fn async mut run(socket: uni TcpClient) {
    let socket = recover {
      let socket = recover socket

      # TODO: how would we make this error handling logic reusable?
      match parse_request(socket) {
        case Ok(_) -> {
          # TODO: act upon request
          socket
        }
        # In the event of generic IO errors there's nothing we can do and
        # logging isn't really useful, so we just shut down the connection.
        case Error(Read(e)) -> {
          let _ = socket.shutdown

          @logger.debug('failed to parse client request: ${e}')
          return
        }
        case Error(e) -> {
          let _ = socket.write_string('-ERR ${e}\r\n')
          let _ = socket.shutdown

          @logger.debug('failed to parse client request: ${e}')
          return
        }
      }
    }

    run(socket)
  }

  fn mut parse_request(socket: mut TcpClient) -> Result[Nil, Error] {
    let parser = Parser.new(socket, @buffer)
    let size = try parser.array

    # TODO: handling of commands is contextual. For example, `COMMAND
    # DOCS` is just two separate strings. This means that when we parse
    # `COMMAND` we have to check the array size to see if the command is
    # given any arguments.
    Result.Ok(nil)
  }
}
