import kvi.proto.error (Error)
import std.cmp (Equal)
import std.fmt (Format, Formatter)
import std.io (Read)

let ADD = 43
let AST = 42
let CLN = 58
let CR = 13
let DLR = 36
let LF = 10
let NINE = 57
let SUB = 45
let UPPER_D = 68
let UPPER_G = 71
let UPPER_H = 72
let UPPER_K = 75
let UPPER_S = 83
let ZERO = 48

let COMMANDS = ['DEL', 'GET', 'HELLO', 'KEYS', 'SET']

fn inline parse_digit(current: Int, byte: Int) -> Int {
  current.wrapping_mul(10).wrapping_add(byte - ZERO)
}

fn inline digit?(byte: Int) -> Bool {
  byte >= ZERO and byte <= NINE
}

type copy enum Event {
  case Array(Int)
  case Int(Int)
  case BulkString(Int)
}

impl Equal for Event {
  fn pub ==(other: Event) -> Bool {
    match (self, other) {
      case (Array(a), Array(b)) -> a == b
      case (Int(a), Int(b)) -> a == b
      case (BulkString(a), BulkString(b)) -> a == b
      case _ -> false
    }
  }
}

impl Format for Event {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Array(v) -> formatter.tuple('Array').field(v).finish
      case Int(v) -> formatter.tuple('Int').field(v).finish
      case BulkString(v) -> formatter.tuple('BulkString').field(v).finish
    }
  }
}

type copy enum Command {
  case Delete
  case Get
  case Hello
  case Keys
  case Set

  fn static parse(bytes: ref ByteArray) -> Option[Command] {
    let len = bytes.size

    # For most commands the first tree bytes form a unique prefix. In some cases
    # there's a shared prefix (e.g. GET and GETEX), so in such cases we also
    # need to compare the remainder.
    #
    # The end goal of this somewhat complicated `match` is to reduce the amount
    # of linear scans we need to perform, as parsing commands is something we
    # expect to do often.
    #
    # While this match is a bit ugly, until
    # https://github.com/inko-lang/inko/issues/827 is addressed it's more or
    # less the best we can do.
    match (bytes.get(2) << 16) | (bytes.get(1) << 8) | bytes.get(0) {
      # DEL[...]
      case 0x4c4544 -> if len == 3 { return Option.Some(Command.Delete) }
      # GET[...]
      case 0x544547 -> if len == 3 { return Option.Some(Command.Get) }
      # HEL[...]
      case 0x4c4548 -> {
        if len == 5 and bytes.ends_with?('LO') {
          return Option.Some(Command.Hello)
        }
      }
      # KEY[...]
      case 0x59454b -> {
        if len == 4 and bytes.ends_with?('S') {
          return Option.Some(Command.Keys)
        }
      }
      # SET[...]
      case 0x544553 -> if len == 3 { return Option.Some(Command.Set) }
      case _ -> {}
    }

    Option.None
  }
}

impl Equal for Command {
  fn pub ==(other: Command) -> Bool {
    match (self, other) {
      case (Delete, Delete) -> true
      case (Get, Get) -> true
      case (Hello, Hello) -> true
      case (Keys, Keys) -> true
      case (Set, Set) -> true
      case _ -> false
    }
  }
}

impl Format for Command {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case Delete -> formatter.tuple('Delete').finish
      case Get -> formatter.tuple('Get').finish
      case Hello -> formatter.tuple('Hello').finish
      case Keys -> formatter.tuple('Keys').finish
      case Set -> formatter.tuple('Set').finish
    }
  }
}

type inline Parser[T: mut + Read] {
  let @stream: T
  let @buffer: mut ByteArray

  fn static new(stream: T, buffer: mut ByteArray) -> Parser[T] {
    Parser(stream: stream, buffer: buffer)
  }

  fn mut command -> Result[Command, Error] {
    try read(try bulk_string)
    try read_terminator

    match Command.parse(@buffer) {
      case Some(v) -> {
        @buffer.clear
        Result.Ok(v)
      }
      case _ -> Result.Error(Error.InvalidCommand(@buffer.drain_to_string))
    }
  }

  fn mut string_literal -> Result[String, Error] {
    try read(try bulk_string)
    try read_terminator
    Result.Ok(@buffer.drain_to_string)
  }

  fn mut skip_bulk_strings(amount: Int) -> Result[Nil, Error] {
    let mut i = 0

    while i < amount {
      try skip_bulk_string
      i += 1
    }

    Result.Ok(nil)
  }

  fn mut skip_bulk_string -> Result[Nil, Error] {
    try read(try bulk_string)
    @buffer.clear
    try read_terminator
    Result.Ok(nil)
  }

  fn mut array -> Result[Int, Error] {
    match parse {
      case Ok(Array(n)) -> Result.Ok(n)
      case Ok(_) -> Result.Error(Error.InvalidSyntax)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut bulk_string -> Result[Int, Error] {
    match parse {
      case Ok(BulkString(n)) -> Result.Ok(n)
      case Ok(_) -> Result.Error(Error.InvalidSyntax)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut parse -> Result[Event, Error] {
    match try read_byte {
      case AST -> Result.Ok(Event.Array(try size))
      case DLR -> Result.Ok(Event.BulkString(try size))
      case CLN -> Result.Ok(Event.Int(try integer))
      case _ -> throw Error.InvalidSyntax
    }
  }

  fn mut size -> Result[Int, Error] {
    digits(-1)
  }

  fn mut integer -> Result[Int, Error] {
    match read_byte {
      case Ok(ADD) -> size
      case Ok(SUB) -> Result.Ok(0 - try size)
      case Ok(v) -> digits(v)
      case Error(e) -> Result.Error(e)
    }
  }

  fn mut digits(initial: Int) -> Result[Int, Error] {
    let mut val = 0

    # The minimum number of bytes is three: one for a single digit, and two for
    # \r\n. This means we can read the initial/minimum amount of necessary data
    # in a single call.
    if initial >= 0 { @buffer.push(initial) }

    try read(3 - @buffer.size)

    match (@buffer.get(0), @buffer.get(1), @buffer.get(2)) {
      case (a, CR, LF) if digit?(a) -> {
        @buffer.clear
        val = parse_digit(val, a)
        return Result.Ok(val)
      }
      case (a, b, CR) if digit?(a) and digit?(b) -> {
        @buffer.clear
        val = parse_digit(val, a)
        val = parse_digit(val, b)
        try read_lf
        return Result.Ok(val)
      }
      case (a, b, c) if digit?(a) and digit?(b) and digit?(c) -> {
        @buffer.clear
        val = parse_digit(val, a)
        val = parse_digit(val, b)
        val = parse_digit(val, c)
      }
      case _ -> throw Error.InvalidSyntax
    }

    # For the remaining input we can only read at most two bytes per time,
    # otherwise we might read too much. For example, for the input `123\r\n` the
    # above code reads `123`, leaving us with the remaining `\r\n`.
    loop {
      try read(2)

      match (@buffer.get(0), @buffer.get(1)) {
        case (CR, LF) -> {
          @buffer.clear
          break
        }
        case (a, CR) if digit?(a) -> {
          @buffer.clear
          val = parse_digit(val, a)
          try read_lf
          break
        }
        case (a, b) if digit?(a) and digit?(b) -> {
          @buffer.clear
          val = parse_digit(val, a)
          val = parse_digit(val, b)
        }
        case _ -> throw Error.InvalidSyntax
      }
    }

    Result.Ok(val)
  }

  fn inline mut read_byte -> Result[Int, Error] {
    try read(1)
    Result.Ok(@buffer.pop.get)
  }

  fn inline mut read_terminator -> Result[Nil, Error] {
    match try read_byte {
      case CR -> read_lf
      case _ -> Result.Error(Error.InvalidSyntax)
    }
  }

  fn inline mut read_lf -> Result[Nil, Error] {
    match try read_byte {
      case LF -> Result.Ok(nil)
      case _ -> Result.Error(Error.InvalidSyntax)
    }
  }

  fn inline mut read(size: Int) -> Result[Nil, Error] {
    match @stream.read_exact(into: @buffer, size: size) {
      case Ok(_) -> Result.Ok(nil)
      case Error(EndOfInput) -> Result.Error(Error.Closed)
      case Error(ConnectionAborted or ConnectionReset or BrokenPipe) -> {
        # We normalize these errors so it's easier to handle different
        # disconnect reasons.
        Result.Error(Error.Closed)
      }
      case Error(e) -> Result.Error(Error.Read(e))
    }
  }
}
