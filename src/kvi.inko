import kvi.config (Config)
import kvi.server (start)
import std.env (arguments)
import std.optparse (Options)
import std.stdio (Stderr, Stdout)
import std.sys (exit)

let VERSION = '0.1.0'

fn run -> Result[Nil, String] {
  let arguments = arguments
  let stdout = Stdout.new
  let opts = Options.new('kvi')

  opts.description = 'A simple key-value database using the Redis serialization protocol.'
  opts.flag('h', 'help', 'Show this help message')
  opts.flag('v', 'version', 'Show the version')
  opts.multiple('i', 'ip', 'IP', 'The IP addresses to bind to')
  opts.single('p', 'port', 'INT', 'The port to bind to')
  opts.single('s', 'shards', 'INT', 'The number of shards to use')
  opts.single(
    'a',
    'accepters',
    'INT',
    'The number of processes to use for accepting new connections',
  )
  opts.single('l', 'log', 'LEVEL', 'The logging level to enable')

  let matches = match opts.parse(arguments) {
    case Ok(v) -> v
    case Error(e) -> throw e.to_string
  }

  if matches.contains?('help') {
    let _ = stdout.write(opts.to_string)

    return Result.Ok(nil)
  }

  if matches.contains?('version') {
    let _ = stdout.print('kvi ${VERSION}')

    return Result.Ok(nil)
  }

  let conf = Config.new

  if matches.contains?('ip') { try conf.parse_ips(matches.values('ip')) }

  match matches.value('port') {
    case Some(v) -> try conf.parse_port(v)
    case _ -> {}
  }

  match matches.value('shards') {
    case Some(v) -> try conf.parse_shards(v)
    case _ -> {}
  }

  match matches.value('accepters') {
    case Some(v) -> try conf.parse_accepters(v)
    case _ -> {}
  }

  match matches.value('log') {
    case Some(v) -> try conf.parse_log_level(v)
    case _ -> {}
  }

  start(conf)
}

type async Main {
  fn async main {
    match run {
      case Ok(_) -> {}
      case Error(e) -> {
        let err = Stderr.new

        if err.terminal? {
          let _ = err.write('\e[31;1merror\e[0m: ')
        } else {
          let _ = err.write('error: ')
        }

        let _ = err.print(e)

        exit(1)
      }
    }
  }
}
